@page
@model FoodDeliveryAdminWebsite.Pages.IndexModel
@{
    ViewData["Title"] = "Admin Dashboard";
    var totalOrders = Model.Orders?.Count() ?? 0;
    var confirmedOrders = Model.Orders?.Count(o => o.Status == "collected") ?? 0;
}

<div class="container mt-4">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }

    <div class="welcome-header text-center mb-5">
        <h1>Welcome to Food Delivery Admin</h1>
        <p class="lead">Manage your food delivery business efficiently</p>
    </div>

    <!-- Dashboard Summary -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card border-orange hover-orange mb-3">
                <div class="card-body text-orange">
                    <h5 class="card-title">Total Orders</h5>
                    <p class="card-text display-6 fw-bold">@totalOrders</p>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card border-orange hover-orange mb-3">
                <div class="card-body text-orange">
                    <h5 class="card-title">Confirmed Orders</h5>
                    <p class="card-text display-6 fw-bold">@confirmedOrders</p>
                </div>
            </div>
        </div>
    </div>





    <!-- Recent Activity -->
    <div class="recent-activity mb-5">
        <h2>Recent Activity</h2>
        <div class="activity-list">
            <div class="activity-item">
                <div class="activity-icon">🆕</div>
                <div class="activity-content">
                    <p><strong>@Model.RecentConfirmedOrders.Count</strong> orders confirmed in the last hour</p>
                    <small class="text-muted">
                        @if (Model.RecentConfirmedOrders.Any())
                        {
                            <text>Last confirmed @Model.RecentConfirmedOrders.First().Timestamp.ToLocalTime().ToString("HH:mm")</text>
                        }
                        else
                        {
                            <text>No recent confirmations</text>
                        }
                    </small>
                </div>
            </div>

            <div class="activity-item">
                <div class="activity-icon">✅</div>
                <div class="activity-content">
                    <p><strong>@Model.Orders.Count(o => o.Status == "collected")</strong> total orders completed</p>
                    <small class="text-muted">Updated now</small>
                </div>
            </div>

            <div class="activity-item">
                <div class="activity-icon">📦</div>
                <div class="activity-content">
                    <p><strong>@Model.MenuItems.Count</strong> menu items available</p>
                    <small class="text-muted">Menu last loaded @DateTime.Now.ToString("HH:mm")</small>
                </div>
            </div>
        </div>
    </div>


    <!-- Order Trends Chart -->
    <div class="order-graph-section mb-5">
        <h2>Order Trends</h2>
        <canvas id="ordersChart" width="400" height="200"></canvas>
    </div>




    
</div>

<script>
    // Prepare data from server
    const chartLabels = @Html.Raw(Json.Serialize(Model.OrdersPerDay.Keys));
    const totalOrdersData = @Html.Raw(Json.Serialize(Model.OrdersPerDay.Values.Select(v => v.Total)));
    const confirmedOrdersData = @Html.Raw(Json.Serialize(Model.OrdersPerDay.Values.Select(v => v.Confirmed)));

    const ctx = document.getElementById('ordersChart').getContext('2d');
    new Chart(ctx, {
        type: 'line',
        data: {
            labels: chartLabels,
            datasets: [
                {
                    label: 'Total Orders',
                    data: totalOrdersData,
                    borderColor: 'rgba(54, 162, 235, 1)',
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderWidth: 2,
                    tension: 0.3
                },
                {
                    label: 'Confirmed Orders',
                    data: confirmedOrdersData,
                    borderColor: 'rgba(40, 167, 69, 1)',
                    backgroundColor: 'rgba(40, 167, 69, 0.2)',
                    borderWidth: 2,
                    tension: 0.3
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            }
        }
    });
</script>



<style>
    .welcome-header h1 {
        font-size: 2.5rem;
        color: #e65100;
        margin-bottom: 0.5rem;
    }

    .lead {
        font-size: 1.25rem;
        color: #6c757d;
    }

    .quick-actions h2,
    .recent-activity h2 {
        font-size: 1.75rem;
        margin-bottom: 1.5rem;
        color: #343a40;
    }

    .action-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .action-card {
        background: white;
        border-radius: 0.5rem;
        padding: 1.5rem;
        text-align: center;
        text-decoration: none;
        color: #343a40;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

        .action-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
            color: #007bff;
        }

    .action-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
    }

    .activity-list {
        background: white;
        border-radius: 0.5rem;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .activity-item {
        display: flex;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        align-items: center;
    }

        .activity-item:last-child {
            border-bottom: none;
        }

    .activity-icon {
        font-size: 1.5rem;
        margin-right: 1rem;
        flex-shrink: 0;
    }

    .activity-content p {
        margin: 0;
    }

    .text-muted {
        color: #6c757d;
        font-size: 0.875rem;
    }

   
    .action-grid {
        grid-template-columns: 1fr 1fr;
    }

    }

    .order-graph-section {
        background: white;
        padding: 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }


    /* Orange themed border and hover effect */
    .border-orange {
        border: 2px solid #ff9800;
        background-color: white;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .text-orange {
        color: #ff9800;
        transition: color 0.3s ease;
    }

    .hover-orange:hover {
        background-color: #ff9800 !important;
        color: white !important;
    }

        .hover-orange:hover .text-orange {
            color: white !important;
        }


</style>
